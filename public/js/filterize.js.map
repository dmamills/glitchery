{"version":3,"sources":["filterize.js","src/Pixel.js","src/Conversions.js","src/filterize-canvas.js","src/Filter.js","src/toolBoxController.js","src/filterSelectionController.js","src/fileControlsController.js","src/fileUploaderController.js","src/timelinePreviewController.js","src/Frame.js","src/timelineControlsController.js","src/previewFrameController.js","src/filterService.js","src/main.js"],"names":[],"mappings":"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","file":"filterize.js","sourcesContent":["(function (factory) {\n    !(typeof exports === 'object' && typeof module !== 'undefined') &&\n    typeof define === 'function' && define.amd ? define(factory) :\n    factory()\n}(function () { 'use strict';\n\n    class Pixel__Pixel {\n        \n        constructor(r,g,b,a) {\n            this.r = r;\n            this.g = g;\n            this.b = b;\n            this.a = a;\n        }\n\n        toData() {\n            return [\n                this.r,\n                this.g,\n                this.b,\n                this.a,\n            ];\n        }\n\n        toHex() {\n            let n = (this.r << 16) + (this.g << 8) + (this.b);\n            return n.toString(16);\n        }\n    }\n\n    var Pixel__default = Pixel__Pixel;\n\n    let Conversions__Conversions = {\n        toRGB(imgData) {\n            let rgb = [];\n            let data = imgData.data;\n            for(var i=0; i < data.length; i +=4) {\n                let pixel = new Pixel(data[i], data[i+1], data[i+2], data[i+3]);\n                rgb.push(pixel);\n            }\n            return rgb;\n        },\n        toImgData(rgb, w, h) {\n            \n        }\n    }\n\n    var Conversions__default = Conversions__Conversions;\n\n    class Filterize {\n\n        constructor(imgEl, preFilterFn, postFilterFn, brushSize) {\n            this.imgEl = imgEl;\n            this.preFilter = preFilterFn;\n            this.postFilter = postFilterFn;\n            this.brushSize = brushSize;\n            this.mouseDown = false;\n            this.undoHistory = [];\n\n            this.canvas = document.createElement('canvas');\n            this.canvas.style.cursor = 'pointer';\n            this.ctx = this.canvas.getContext('2d');\n\n            // this.imgEl.onload = (function() {\n                let w = this.imgEl.width;\n                let h = this.imgEl.height;\n                this.canvas.width = w;\n                this.canvas.height = h;\n\n                this.ctx.drawImage(this.imgEl, 0, 0, w, h);\n                let imgData = this.ctx.getImageData(0, 0, w, h);\n\n                this.preFilter(imgData);\n                \n                this.canvas.onmousedown = (function(e) { \n                    this.mouseDown = true; \n                    this.undoHistory.push(this.takeSnapshot());\n                    this.applyFilter(e);\n                }).bind(this);\n\n                this.canvas.onmouseup = (function(e) { \n                    this.mouseDown = false; \n                }).bind(this);\n\n                this.canvas.onmousemove = (function(e) {\n                    if(!this.mouseDown) return;\n\n                    this.applyFilter(e);\n                }).bind(this);\n            // }).bind(this);\n        }\n        applyFilter(e) {\n            let x = e.offsetX;\n            let y = e.offsetY;\n            let h = this.brushSize / 2;\n            \n            let sx = (e.offsetX - h >= 0) ? e.offsetX - h : 0;\n            let sy = (e.offsetY - h >= 0) ? e.offsetY - h : 0;\n\n            let tempData = this.ctx.getImageData(sx,sy, this.brushSize, this.brushSize);\n            \n            let drawFn = this.createDrawFn(e);\n            this.postFilter(tempData, drawFn);\n        }\n        \n\n        takeSnapshot() {\n            let w = this.imgEl.width;\n            let h = this.imgEl.height;\n            return this.ctx.getImageData(0, 0, w, h);\n        }\n\n        undo() {\n            if(this.undoHistory.length === 0) {\n                alert('nothing to undo');\n                return;\n            }\n\n            var lastSnapshot = this.undoHistory.pop();\n            this.ctx.putImageData(lastSnapshot, 0, 0);\n        }\n\n        createDrawFn(e) {\n            return (function(imgData) {\n                let h = this.brushSize / 2;\n                let sx = (e.offsetX - h >= 0) ? e.offsetX - h : 0;\n                let sy = (e.offsetY - h >= 0) ? e.offsetY - h : 0;\n                this.ctx.putImageData(imgData, sx,sy);\n\n            }).bind(this)\n        }\n\n        setPostFilter(fn) {\n            this.postFilter = fn;\n        }\n\n        setBrushSize(size) {\n            this.brushSize = size;\n        }\n        loopFrames(frames, time) {\n            this.lastSnapshot = this.takeSnapshot();\n            var f = 0;\n            this.loopInterval = setInterval((function() {\n                this.ctx.putImageData(frames[f++].data, 0, 0);\n                if(f > frames.length - 1) f = 0;\n            }).bind(this), frames[0].duration);\n        }\n        stopLoop() {\n            clearInterval(this.loopInterval);\n            this.ctx.putImageData(this.lastSnapshot, 0, 0);\n        }\n\n        setBaseImage(imgEl) {\n            this.imgEl = imgEl;\n            this.canvas.width = this.imgEl.width;\n            this.canvas.height = this.imgEl.height;\n            this.reset();\n        }\n\n        getCanvas() {\n            return this.canvas;\n        }\n\n        reset() {\n            let w = this.imgEl.width;\n            let h = this.imgEl.height;\n            this.undoHistory = [];\n            this.ctx.drawImage(this.imgEl, 0, 0, w, h);\n        }\n\n    };\n\n    Filterize.Conversions = Conversions__default;\n    Filterize.Pixel = Pixel__default;\n\n    class Filter {\n        \n        constructor(name, fn) {\n            this.name = name;\n            this.fn = fn;\n        }\n\n    };\n\n    let toolBoxController__toolBoxController = ($scope) => {\n\n        $scope.selectedFilter = undefined;\n        $scope.brushSize = 20;\n\n    }\n\n\n    var toolBoxController__default = toolBoxController__toolBoxController;\n\n    let filterSelectionController__filterSelectionController = ($scope, $rootScope, filterService) => {\n\n        $scope.filters = filterService;\n\n        $scope.selectedFilter = filterService[0];\n        $rootScope.selectedFilter = $scope.selectedFilter;\n        $scope.selectedFilter.selected = true;\n\n        $scope.$watch('brushSize', (nv,ov) => {\n            if(!nv) return;\n            $rootScope.filterize.setBrushSize(nv);\n        });\n\n        $scope.select = (filter) => {\n            $scope.selectedFilter.selected = false;\n            filter.selected = true;\n            $scope.selectedFilter = filter;\n        }\n    }\n\n\n    var filterSelectionController__default = filterSelectionController__filterSelectionController;\n\n    let fileControlsController__fileControlsController = ($scope, $rootScope, API_URL) => {\n\n        let filterize = $rootScope.filterize;\n        let jsonHeaders = {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json'\n        };\n\n        $scope.onReset = () => {\n            filterize.reset();\n        }\n\n        $scope.onUndo = () => {\n            filterize.undo();\n        }\n\n        $scope.toGif = () => {\n            let frames = $rootScope.frames;\n            let data = frames.map((f) => {\n                return f.toJson();\n            });\n\n            let width = filterize.getCanvas().width;\n            let height = filterize.getCanvas().height;\n            fetch(`${API_URL}/gif`, {\n                method: 'post',\n                headers: jsonHeaders,\n                body: JSON.stringify({\n                    frames: data,\n                    width: width,\n                    height: height\n                })\n            }).then((res) => { return res.json(); })\n            .then(data => {\n                console.log(data);\n                $scope.$apply(() =>{\n                    $scope.uploadedGif = data.id;\n                    $scope.dialogShown = true;\n                })\n            }, err => {\n\n            });\n\n        }\n\n        $scope.onSave = () => {\n\n            let data = filterize.getCanvas().toDataURL();\n            let formData = new FormData();\n            formData.append('data', data);\n\n            fetch(`${API_URL}/save`, {\n                method: 'post',\n                headers: jsonHeaders,\n                body: JSON.stringify({\n                    data: data\n                })\n              }).then((res) => { return res.json(); })\n              .then((data) => {\n                var tempEl = document.createElement('a');\n                tempEl.href = `${API_URL}/download/${data.id}`;\n                tempEl.click();\n              }, (err) => {\n\n              });\n        }\n    }\n\n\n    var fileControlsController__default = fileControlsController__fileControlsController;\n\n    let fileUploaderController__fileUploaderController = ($scope, $rootScope) => {\n\n        let onUpload = (data) => {\n            $rootScope.onUpload(data.filepath);\n        };\n\n        let uploadForm = document.getElementById('uploadForm');\n\n        $scope.submit = (e) => {\n            e.preventDefault();\n            fetch('/upload', {\n                method: 'post',\n                body: new FormData(uploadForm)\n            }).then(function(res) {\n                return res.json();\n            }).then(onUpload, function(err) {\n                console.log('error');\n            });\n        }\n    }\n\n    var fileUploaderController__default = fileUploaderController__fileUploaderController;\n\n    let timelinePreviewController__timelineController = ($scope, $rootScope) => {\n        $scope.frames = $rootScope.frames;\n\n        $scope.remove = (frame) => {\n            let idx = $scope.frames.indexOf(frames);\n            $scope.frames.splice(idx-1,1);\n        }\n    };\n\n    var timelinePreviewController = timelinePreviewController__timelineController;\n\n    class Frame {\n        constructor(data, duration) {\n            this.data = data;\n            this.duration = duration\n        }\n\n        toJson() {\n            let c = document.createElement('canvas');\n            c.width = this.data.width;\n            c.height = this.data.height;\n            let ctx = c.getContext('2d');\n            ctx.putImageData(this.data, 0, 0);\n            ctx.drawImage(ctx.canvas, 0, 0, c.width, c.height);\n\n            return {\n                data: c.toDataURL(),\n                duration: this.duration\n            };\n        }\n    }\n\n    let timelineControlsController__timelineControlsController = ($scope,$rootScope) => {\n        \n        $scope.frames = $rootScope.frames;\n        $scope.interval = 100;\n        $scope.isPlaying = false;\n        \n        $scope.add = function() {\n            let f = $rootScope.filterize;\n            let interval = $scope.interval;\n            let frame = new Frame(f.takeSnapshot(), interval);\n            $scope.frames.push(frame);\n        }\n\n        $scope.loop = function() {\n            let f = $rootScope.filterize;\n            if(!$scope.isPlaying) {\n                f.loopFrames($scope.frames);\n            } else {\n                f.stopLoop();\n            }\n\n            $scope.isPlaying = !$scope.isPlaying;\n        }\n    };\n\n    var timelineControlsController__default = timelineControlsController__timelineControlsController;\n\n    let previewFrameController__previewFrameController = ($scope) => {\n\n        let c = document.createElement('canvas');\n        c.width = $scope.frame.data.width;\n        c.height = $scope.frame.data.height;\n\n        let ctx = c.getContext('2d');\n        ctx.putImageData($scope.frame.data, 0, 0);\n        $scope.preview = c.toDataURL();\n    }\n\n    var previewFrameController__default = previewFrameController__previewFrameController;\n\n    let _filterService__filterService = () => {\n\n        let sharpen = (data) => {\n            let weights = [  0, -1,  0,\n                            -1,  5, -1,\n                             0, -1,  0 ];\n\n            let result = convolute(data, weights);\n            return result;\n        };\n\n        let blur = (data) => {\n            let weights = [ 1/9, 1/9, 1/9,\n                            1/9, 1/9, 1/9,\n                            1/9, 1/9, 1/9 ];\n\n            return convolute(data, weights);\n        }\n\n        let danielSpecial = (data) => {\n            let weights = [ 1, 1, 1,\n                            -1, 0.7, 1,\n                            -1, -1, -1 ];\n\n            return convolute(data, weights);\n        }\n\n        let convolute = (pixels, weights, opaque) => {\n\n            var side = Math.round(Math.sqrt(weights.length));\n            var halfSide = Math.floor(side/2);\n            var src = pixels.data;\n            var sw = pixels.width;\n            var sh = pixels.height;\n\n            // pad output by the convolution matrix\n            var w = sw;\n            var h = sh;\n            var output = document.createElement('canvas').getContext('2d').createImageData(w,h);\n            var dst = output.data;\n            // go through the destination image pixels\n            var alphaFac = opaque ? 1 : 0;\n            for (var y=0; y<h; y++) {\n              for (var x=0; x<w; x++) {\n                var sy = y;\n                var sx = x;\n                var dstOff = (y*w+x)*4;\n                // calculate the weighed sum of the source image pixels that\n                // fall under the convolution matrix\n                var r=0, g=0, b=0, a=0;\n                for (var cy=0; cy<side; cy++) {\n                  for (var cx=0; cx<side; cx++) {\n                    var scy = sy + cy - halfSide;\n                    var scx = sx + cx - halfSide;\n                    if (scy >= 0 && scy < sh && scx >= 0 && scx < sw) {\n                      var srcOff = (scy*sw+scx)*4;\n                      var wt = weights[cy*side+cx];\n                      r += src[srcOff] * wt;\n                      g += src[srcOff+1] * wt;\n                      b += src[srcOff+2] * wt;\n                      a += src[srcOff+3] * wt;\n                    }\n                  }\n                }\n                dst[dstOff] = r;\n                dst[dstOff+1] = g;\n                dst[dstOff+2] = b;\n                dst[dstOff+3] = a + alphaFac*(255-a);\n              }\n            }\n            return output;\n\n        };\n\n        let grayscaleFilter = new Filter('grayscale',(data) => {\n            data = data.data;\n            for (var i = 0; i < data.length; i += 4) {\n               var avg = (data[i] + data[i +1] + data[i +2]) / 3;\n               data[i] = avg;\n               data[i + 1] = avg;\n               data[i + 2] = avg;\n            }\n\n            return data;\n        });\n\n        let createAlterFilter = (threshold) => {\n            return (data) => {\n                data = data.data;\n                for(var i =0; i < data.length;i += 4) {\n                    data[i] = data[i] + (data[i] * threshold);\n                    data[i+1] = data[i+1] + (data[i+1] * threshold);\n                    data[i+2] = data[i+2] + (data[i+2] * threshold);\n\n                    if(data[i] > 255) data[i] = 255;\n                    if(data[i+1] > 255) data[i+1] = 255;\n                    if(data[i+2] > 255) data[i+2] = 255;\n                }\n                return data;\n\n            }\n        }\n\n        let createColorFilter = (n) => {\n            return (data) => {\n                data = data.data;\n                for (var i = 0; i < data.length; i += 4) {\n                    data[i+n] = (data[i+n] << 2 <= 255) ? (data[i + n] << 2) : 255;\n                }\n                return data;\n            };\n        }\n\n        let redFilter = new Filter('red', createColorFilter(0));\n        let greenFilter = new Filter('green', createColorFilter(1));\n        let blueFilter = new Filter('blue', createColorFilter(2));\n\n        let brightenFilter = new Filter('brighten', createAlterFilter(0.1));\n        let darkenFilter = new Filter('darken', createAlterFilter(-0.05));\n        let sharpenFilter = new Filter('shapen', sharpen);\n        let blurFilter = new Filter('blur', blur);\n        let danielFilter = new Filter('danielSpecial', danielSpecial);\n\n\n        return [\n            grayscaleFilter,\n            redFilter,\n            greenFilter,\n            blueFilter,\n            brightenFilter,\n            darkenFilter,\n            sharpenFilter,\n            blurFilter,\n            danielFilter,\n        ];\n\n    }\n\n    var _filterService = _filterService__filterService;\n\n    angular.module('filterize', ['ngModal'])\n\n    //Controllers\n    .controller('filterSelectionController', filterSelectionController__default)\n    .controller('toolBoxController', toolBoxController__default)\n    .controller('fileControlsController', fileControlsController__default)\n    .controller('fileUploaderController', fileUploaderController__default)\n    .controller('timelinePreviewController', timelinePreviewController)\n    .controller('timelineControlsController', timelineControlsController__default)\n    .controller('previewFrameController', previewFrameController__default)\n\n    //Services\n    .service('filterService', _filterService)\n\n    //Directives\n    .directive('toolBox', function() {\n        return {\n            restrict: 'E',\n            templateUrl: 'tpls/toolBox.tpl.html',\n            controller: 'toolBoxController'\n        }\n    })\n    .directive('filterSelection', () => {\n        return {\n            restrict: 'E',\n            templateUrl: 'tpls/filterSelection.tpl.html',\n            controller: 'filterSelectionController'\n        };\n    })\n    .directive('fileControls', () => {\n        return {\n            restrict: 'E',\n            templateUrl: 'tpls/fileControls.tpl.html',\n            controller: 'fileControlsController'\n        }\n    })\n    .directive('fileUploader', () => {\n        return {\n            restrict: 'E',\n            templateUrl: 'tpls/fileUploader.tpl.html',\n            controller: 'fileUploaderController'\n        }\n    })\n    .directive('timelinePreview', () => {\n        return {\n            restrict: 'E',\n            templateUrl: 'tpls/timelinePreview.tpl.html',\n            controller: 'timelinePreviewController'\n        }\n    })\n    .directive('timelineControls', () => {\n        return {\n            restrict: 'E',\n            templateUrl: 'tpls/timelineControls.tpl.html',\n            controller: 'timelineControlsController'\n        }\n    })\n    .directive('previewFrame', () => {\n        return {\n            restrict: 'E',\n            scope: {\n                frame: '='\n            },\n            templateUrl: 'tpls/previewFrame.tpl.html',\n            controller: 'previewFrameController'\n        }\n    })\n    .filter('intervalSpeed', () => {\n        return input => {\n            if(!input) return '';\n            return (input / 1000).toFixed('1') + 's';\n        };\n    })\n\n    //environment variables\n    .constant('API_URL', 'http://localhost:8000')\n    // .constant('API_URL', 'http://theglitchery.com');\n\n    .run(function($window, $rootScope, filterService) {\n\n        let img = document.getElementById('replaceMe');\n        $rootScope.selectedFilter = filterService[0];\n\n        $rootScope.onUpload = (filepath) => {\n            img.src = '/' + filepath;\n\n            img.onload = function() {\n                $rootScope.$apply(function(){\n                    $rootScope.filterize.setBaseImage(img);\n                });\n            }\n        }\n\n        let pre = (imgData, drawFn) => {\n\n        }\n\n        let post = (imgData, drawFn) => {\n            var data = $rootScope.selectedFilter.fn(imgData);\n\n            if(data.data) {\n                data = data.data;\n            }\n\n            drawFn(new ImageData(data,imgData.width, imgData.height));\n        }\n\n        //create the filterize object\n        $rootScope.filterize = new Filterize(img, pre, post, 20);\n        $rootScope.frames = [];\n\n        //lol probably not \"the angular way\"\n        document.getElementById('putCanvasHere').appendChild($rootScope.filterize.getCanvas());\n    });\n\n}));\n","class Pixel {\n    \n    constructor(r,g,b,a) {\n        this.r = r;\n        this.g = g;\n        this.b = b;\n        this.a = a;\n    }\n\n    toData() {\n        return [\n            this.r,\n            this.g,\n            this.b,\n            this.a,\n        ];\n    }\n\n    toHex() {\n        let n = (this.r << 16) + (this.g << 8) + (this.b);\n        return n.toString(16);\n    }\n}\n\nexport default Pixel;\n","let Conversions = {\n    toRGB(imgData) {\n        let rgb = [];\n        let data = imgData.data;\n        for(var i=0; i < data.length; i +=4) {\n            let pixel = new Pixel(data[i], data[i+1], data[i+2], data[i+3]);\n            rgb.push(pixel);\n        }\n        return rgb;\n    },\n    toImgData(rgb, w, h) {\n        \n    }\n}\n\nexport default Conversions;\n","import Pixel from 'Pixel';\nimport Conversions from 'Conversions';\n\nclass Filterize {\n\n    constructor(imgEl, preFilterFn, postFilterFn, brushSize) {\n        this.imgEl = imgEl;\n        this.preFilter = preFilterFn;\n        this.postFilter = postFilterFn;\n        this.brushSize = brushSize;\n        this.mouseDown = false;\n        this.undoHistory = [];\n\n        this.canvas = document.createElement('canvas');\n        this.canvas.style.cursor = 'pointer';\n        this.ctx = this.canvas.getContext('2d');\n\n        // this.imgEl.onload = (function() {\n            let w = this.imgEl.width;\n            let h = this.imgEl.height;\n            this.canvas.width = w;\n            this.canvas.height = h;\n\n            this.ctx.drawImage(this.imgEl, 0, 0, w, h);\n            let imgData = this.ctx.getImageData(0, 0, w, h);\n\n            this.preFilter(imgData);\n            \n            this.canvas.onmousedown = (function(e) { \n                this.mouseDown = true; \n                this.undoHistory.push(this.takeSnapshot());\n                this.applyFilter(e);\n            }).bind(this);\n\n            this.canvas.onmouseup = (function(e) { \n                this.mouseDown = false; \n            }).bind(this);\n\n            this.canvas.onmousemove = (function(e) {\n                if(!this.mouseDown) return;\n\n                this.applyFilter(e);\n            }).bind(this);\n        // }).bind(this);\n    }\n    applyFilter(e) {\n        let x = e.offsetX;\n        let y = e.offsetY;\n        let h = this.brushSize / 2;\n        \n        let sx = (e.offsetX - h >= 0) ? e.offsetX - h : 0;\n        let sy = (e.offsetY - h >= 0) ? e.offsetY - h : 0;\n\n        let tempData = this.ctx.getImageData(sx,sy, this.brushSize, this.brushSize);\n        \n        let drawFn = this.createDrawFn(e);\n        this.postFilter(tempData, drawFn);\n    }\n    \n\n    takeSnapshot() {\n        let w = this.imgEl.width;\n        let h = this.imgEl.height;\n        return this.ctx.getImageData(0, 0, w, h);\n    }\n\n    undo() {\n        if(this.undoHistory.length === 0) {\n            alert('nothing to undo');\n            return;\n        }\n\n        var lastSnapshot = this.undoHistory.pop();\n        this.ctx.putImageData(lastSnapshot, 0, 0);\n    }\n\n    createDrawFn(e) {\n        return (function(imgData) {\n            let h = this.brushSize / 2;\n            let sx = (e.offsetX - h >= 0) ? e.offsetX - h : 0;\n            let sy = (e.offsetY - h >= 0) ? e.offsetY - h : 0;\n            this.ctx.putImageData(imgData, sx,sy);\n\n        }).bind(this)\n    }\n\n    setPostFilter(fn) {\n        this.postFilter = fn;\n    }\n\n    setBrushSize(size) {\n        this.brushSize = size;\n    }\n    loopFrames(frames, time) {\n        this.lastSnapshot = this.takeSnapshot();\n        var f = 0;\n        this.loopInterval = setInterval((function() {\n            this.ctx.putImageData(frames[f++].data, 0, 0);\n            if(f > frames.length - 1) f = 0;\n        }).bind(this), frames[0].duration);\n    }\n    stopLoop() {\n        clearInterval(this.loopInterval);\n        this.ctx.putImageData(this.lastSnapshot, 0, 0);\n    }\n\n    setBaseImage(imgEl) {\n        this.imgEl = imgEl;\n        this.canvas.width = this.imgEl.width;\n        this.canvas.height = this.imgEl.height;\n        this.reset();\n    }\n\n    getCanvas() {\n        return this.canvas;\n    }\n\n    reset() {\n        let w = this.imgEl.width;\n        let h = this.imgEl.height;\n        this.undoHistory = [];\n        this.ctx.drawImage(this.imgEl, 0, 0, w, h);\n    }\n\n};\n\nFilterize.Conversions = Conversions;\nFilterize.Pixel = Pixel;\nexport default Filterize;\n","class Filter {\n    \n    constructor(name, fn) {\n        this.name = name;\n        this.fn = fn;\n    }\n\n};\n\nexport default Filter;\n","import Filter from 'Filter';\n\nlet toolBoxController = ($scope) => {\n\n    $scope.selectedFilter = undefined;\n    $scope.brushSize = 20;\n\n}\n\n\nexport default toolBoxController;\n","let filterSelectionController = ($scope, $rootScope, filterService) => {\n\n    $scope.filters = filterService;\n\n    $scope.selectedFilter = filterService[0];\n    $rootScope.selectedFilter = $scope.selectedFilter;\n    $scope.selectedFilter.selected = true;\n\n    $scope.$watch('brushSize', (nv,ov) => {\n        if(!nv) return;\n        $rootScope.filterize.setBrushSize(nv);\n    });\n\n    $scope.select = (filter) => {\n        $scope.selectedFilter.selected = false;\n        filter.selected = true;\n        $scope.selectedFilter = filter;\n    }\n}\n\n\nexport default filterSelectionController;\n","let fileControlsController = ($scope, $rootScope, API_URL) => {\n\n    let filterize = $rootScope.filterize;\n    let jsonHeaders = {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n    };\n\n    $scope.onReset = () => {\n        filterize.reset();\n    }\n\n    $scope.onUndo = () => {\n        filterize.undo();\n    }\n\n    $scope.toGif = () => {\n        let frames = $rootScope.frames;\n        let data = frames.map((f) => {\n            return f.toJson();\n        });\n\n        let width = filterize.getCanvas().width;\n        let height = filterize.getCanvas().height;\n        fetch(`${API_URL}/gif`, {\n            method: 'post',\n            headers: jsonHeaders,\n            body: JSON.stringify({\n                frames: data,\n                width: width,\n                height: height\n            })\n        }).then((res) => { return res.json(); })\n        .then(data => {\n            console.log(data);\n            $scope.$apply(() =>{\n                $scope.uploadedGif = data.id;\n                $scope.dialogShown = true;\n            })\n        }, err => {\n\n        });\n\n    }\n\n    $scope.onSave = () => {\n\n        let data = filterize.getCanvas().toDataURL();\n        let formData = new FormData();\n        formData.append('data', data);\n\n        fetch(`${API_URL}/save`, {\n            method: 'post',\n            headers: jsonHeaders,\n            body: JSON.stringify({\n                data: data\n            })\n          }).then((res) => { return res.json(); })\n          .then((data) => {\n            var tempEl = document.createElement('a');\n            tempEl.href = `${API_URL}/download/${data.id}`;\n            tempEl.click();\n          }, (err) => {\n\n          });\n    }\n}\n\n\nexport default fileControlsController;\n","let fileUploaderController = ($scope, $rootScope) => {\n\n    let onUpload = (data) => {\n        $rootScope.onUpload(data.filepath);\n    };\n\n    let uploadForm = document.getElementById('uploadForm');\n\n    $scope.submit = (e) => {\n        e.preventDefault();\n        fetch('/upload', {\n            method: 'post',\n            body: new FormData(uploadForm)\n        }).then(function(res) {\n            return res.json();\n        }).then(onUpload, function(err) {\n            console.log('error');\n        });\n    }\n}\n\nexport default fileUploaderController;\n","let timelineController = ($scope, $rootScope) => {\n    $scope.frames = $rootScope.frames;\n\n    $scope.remove = (frame) => {\n        let idx = $scope.frames.indexOf(frames);\n        $scope.frames.splice(idx-1,1);\n    }\n};\n\nexport default timelineController;\n","\nclass Frame {\n    constructor(data, duration) {\n        this.data = data;\n        this.duration = duration\n    }\n\n    toJson() {\n        let c = document.createElement('canvas');\n        c.width = this.data.width;\n        c.height = this.data.height;\n        let ctx = c.getContext('2d');\n        ctx.putImageData(this.data, 0, 0);\n        ctx.drawImage(ctx.canvas, 0, 0, c.width, c.height);\n\n        return {\n            data: c.toDataURL(),\n            duration: this.duration\n        };\n    }\n}\n\nexport default Frame;\n","import Frame from 'Frame';\n\nlet timelineControlsController = ($scope,$rootScope) => {\n    \n    $scope.frames = $rootScope.frames;\n    $scope.interval = 100;\n    $scope.isPlaying = false;\n    \n    $scope.add = function() {\n        let f = $rootScope.filterize;\n        let interval = $scope.interval;\n        let frame = new Frame(f.takeSnapshot(), interval);\n        $scope.frames.push(frame);\n    }\n\n    $scope.loop = function() {\n        let f = $rootScope.filterize;\n        if(!$scope.isPlaying) {\n            f.loopFrames($scope.frames);\n        } else {\n            f.stopLoop();\n        }\n\n        $scope.isPlaying = !$scope.isPlaying;\n    }\n};\n\nexport default timelineControlsController;\n","let previewFrameController = ($scope) => {\n\n    let c = document.createElement('canvas');\n    c.width = $scope.frame.data.width;\n    c.height = $scope.frame.data.height;\n\n    let ctx = c.getContext('2d');\n    ctx.putImageData($scope.frame.data, 0, 0);\n    $scope.preview = c.toDataURL();\n}\n\nexport default previewFrameController;\n","import Filter from 'Filter';\n\nlet filterService = () => {\n\n    let sharpen = (data) => {\n        let weights = [  0, -1,  0,\n                        -1,  5, -1,\n                         0, -1,  0 ];\n\n        let result = convolute(data, weights);\n        return result;\n    };\n\n    let blur = (data) => {\n        let weights = [ 1/9, 1/9, 1/9,\n                        1/9, 1/9, 1/9,\n                        1/9, 1/9, 1/9 ];\n\n        return convolute(data, weights);\n    }\n\n    let danielSpecial = (data) => {\n        let weights = [ 1, 1, 1,\n                        -1, 0.7, 1,\n                        -1, -1, -1 ];\n\n        return convolute(data, weights);\n    }\n\n    let convolute = (pixels, weights, opaque) => {\n\n        var side = Math.round(Math.sqrt(weights.length));\n        var halfSide = Math.floor(side/2);\n        var src = pixels.data;\n        var sw = pixels.width;\n        var sh = pixels.height;\n\n        // pad output by the convolution matrix\n        var w = sw;\n        var h = sh;\n        var output = document.createElement('canvas').getContext('2d').createImageData(w,h);\n        var dst = output.data;\n        // go through the destination image pixels\n        var alphaFac = opaque ? 1 : 0;\n        for (var y=0; y<h; y++) {\n          for (var x=0; x<w; x++) {\n            var sy = y;\n            var sx = x;\n            var dstOff = (y*w+x)*4;\n            // calculate the weighed sum of the source image pixels that\n            // fall under the convolution matrix\n            var r=0, g=0, b=0, a=0;\n            for (var cy=0; cy<side; cy++) {\n              for (var cx=0; cx<side; cx++) {\n                var scy = sy + cy - halfSide;\n                var scx = sx + cx - halfSide;\n                if (scy >= 0 && scy < sh && scx >= 0 && scx < sw) {\n                  var srcOff = (scy*sw+scx)*4;\n                  var wt = weights[cy*side+cx];\n                  r += src[srcOff] * wt;\n                  g += src[srcOff+1] * wt;\n                  b += src[srcOff+2] * wt;\n                  a += src[srcOff+3] * wt;\n                }\n              }\n            }\n            dst[dstOff] = r;\n            dst[dstOff+1] = g;\n            dst[dstOff+2] = b;\n            dst[dstOff+3] = a + alphaFac*(255-a);\n          }\n        }\n        return output;\n\n    };\n\n    let grayscaleFilter = new Filter('grayscale',(data) => {\n        data = data.data;\n        for (var i = 0; i < data.length; i += 4) {\n           var avg = (data[i] + data[i +1] + data[i +2]) / 3;\n           data[i] = avg;\n           data[i + 1] = avg;\n           data[i + 2] = avg;\n        }\n\n        return data;\n    });\n\n    let createAlterFilter = (threshold) => {\n        return (data) => {\n            data = data.data;\n            for(var i =0; i < data.length;i += 4) {\n                data[i] = data[i] + (data[i] * threshold);\n                data[i+1] = data[i+1] + (data[i+1] * threshold);\n                data[i+2] = data[i+2] + (data[i+2] * threshold);\n\n                if(data[i] > 255) data[i] = 255;\n                if(data[i+1] > 255) data[i+1] = 255;\n                if(data[i+2] > 255) data[i+2] = 255;\n            }\n            return data;\n\n        }\n    }\n\n    let createColorFilter = (n) => {\n        return (data) => {\n            data = data.data;\n            for (var i = 0; i < data.length; i += 4) {\n                data[i+n] = (data[i+n] << 2 <= 255) ? (data[i + n] << 2) : 255;\n            }\n            return data;\n        };\n    }\n\n    let redFilter = new Filter('red', createColorFilter(0));\n    let greenFilter = new Filter('green', createColorFilter(1));\n    let blueFilter = new Filter('blue', createColorFilter(2));\n\n    let brightenFilter = new Filter('brighten', createAlterFilter(0.1));\n    let darkenFilter = new Filter('darken', createAlterFilter(-0.05));\n    let sharpenFilter = new Filter('shapen', sharpen);\n    let blurFilter = new Filter('blur', blur);\n    let danielFilter = new Filter('danielSpecial', danielSpecial);\n\n\n    return [\n        grayscaleFilter,\n        redFilter,\n        greenFilter,\n        blueFilter,\n        brightenFilter,\n        darkenFilter,\n        sharpenFilter,\n        blurFilter,\n        danielFilter,\n    ];\n\n}\n\nexport default filterService;\n","import Filterize from 'filterize-canvas';\n\nimport toolBoxController from 'toolBoxController';\nimport filterSelectionController from 'filterSelectionController';\nimport fileControlsController from 'fileControlsController';\nimport fileUploaderController from 'fileUploaderController';\nimport timelinePreviewController from 'timelinePreviewController';\nimport timelineControlsController from 'timelineControlsController';\nimport previewFrameController from 'previewFrameController';\n\nimport filterService from 'filterService';\n\nangular.module('filterize', ['ngModal'])\n\n//Controllers\n.controller('filterSelectionController', filterSelectionController)\n.controller('toolBoxController', toolBoxController)\n.controller('fileControlsController', fileControlsController)\n.controller('fileUploaderController', fileUploaderController)\n.controller('timelinePreviewController', timelinePreviewController)\n.controller('timelineControlsController', timelineControlsController)\n.controller('previewFrameController', previewFrameController)\n\n//Services\n.service('filterService', filterService)\n\n//Directives\n.directive('toolBox', function() {\n    return {\n        restrict: 'E',\n        templateUrl: 'tpls/toolBox.tpl.html',\n        controller: 'toolBoxController'\n    }\n})\n.directive('filterSelection', () => {\n    return {\n        restrict: 'E',\n        templateUrl: 'tpls/filterSelection.tpl.html',\n        controller: 'filterSelectionController'\n    };\n})\n.directive('fileControls', () => {\n    return {\n        restrict: 'E',\n        templateUrl: 'tpls/fileControls.tpl.html',\n        controller: 'fileControlsController'\n    }\n})\n.directive('fileUploader', () => {\n    return {\n        restrict: 'E',\n        templateUrl: 'tpls/fileUploader.tpl.html',\n        controller: 'fileUploaderController'\n    }\n})\n.directive('timelinePreview', () => {\n    return {\n        restrict: 'E',\n        templateUrl: 'tpls/timelinePreview.tpl.html',\n        controller: 'timelinePreviewController'\n    }\n})\n.directive('timelineControls', () => {\n    return {\n        restrict: 'E',\n        templateUrl: 'tpls/timelineControls.tpl.html',\n        controller: 'timelineControlsController'\n    }\n})\n.directive('previewFrame', () => {\n    return {\n        restrict: 'E',\n        scope: {\n            frame: '='\n        },\n        templateUrl: 'tpls/previewFrame.tpl.html',\n        controller: 'previewFrameController'\n    }\n})\n.filter('intervalSpeed', () => {\n    return input => {\n        if(!input) return '';\n        return (input / 1000).toFixed('1') + 's';\n    };\n})\n\n//environment variables\n.constant('API_URL', 'http://localhost:8000')\n// .constant('API_URL', 'http://theglitchery.com');\n\n.run(function($window, $rootScope, filterService) {\n\n    let img = document.getElementById('replaceMe');\n    $rootScope.selectedFilter = filterService[0];\n\n    $rootScope.onUpload = (filepath) => {\n        img.src = '/' + filepath;\n\n        img.onload = function() {\n            $rootScope.$apply(function(){\n                $rootScope.filterize.setBaseImage(img);\n            });\n        }\n    }\n\n    let pre = (imgData, drawFn) => {\n\n    }\n\n    let post = (imgData, drawFn) => {\n        var data = $rootScope.selectedFilter.fn(imgData);\n\n        if(data.data) {\n            data = data.data;\n        }\n\n        drawFn(new ImageData(data,imgData.width, imgData.height));\n    }\n\n    //create the filterize object\n    $rootScope.filterize = new Filterize(img, pre, post, 20);\n    $rootScope.frames = [];\n\n    //lol probably not \"the angular way\"\n    document.getElementById('putCanvasHere').appendChild($rootScope.filterize.getCanvas());\n});\n\n"],"sourceRoot":"/source/"}